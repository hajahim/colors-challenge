import fs from 'fs';
import path from 'path';
import chokidar from 'chokidar';

const colorProviders: string = path.resolve('temp/colorRegistered.ts');
const providersList: string = 'shared/providers';
const providerNamingConvention: string = 'color-provider.ts';
const modelList: string = 'shared/models';
const modelNamingConvention: string = '-color.ts';

const isWatch: boolean = process.argv.some((arg) => arg === '--watch');

if (isWatch) {
    watchColorProviders();
} else {
    writeColor();
}

function watchColorProviders(): void {
    // eslint-disable-next-line no-console
    console.log(`Watching for changes to component factory sources in ${providersList}...`);

    chokidar
        .watch(providersList, { ignoreInitial: true, awaitWriteFinish: true })
        .on('add', writeColor)
        .on('unlink', writeColor);
}

function writeColor(): void {
    const componentFactory = susribeColor();
    // eslint-disable-next-line no-console
    console.log(`Writing component factory to ${colorProviders}`);
    fs.writeFileSync(colorProviders, componentFactory, { encoding: 'utf8' });
}

function capitalize(word: string): string {
    return word.replace(/\w/, (firstLetter) => firstLetter.toUpperCase());
}

function camalize(word: string) {
    return word.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (_, chr) => chr.toUpperCase());
}

function susribeColor() {
    const imports: Array<string> = [];
    const providers: Array<string> = [];
    const models: Array<string> = [];

    fs.readdirSync(modelList).forEach((srcSubFolder: string) => {
        const srcSubFolderFullPath: string = path.join(modelList, srcSubFolder);
        const modelFolder = srcSubFolderFullPath.replace(/(\\)/g, '/');
        if (!fs.existsSync(srcSubFolderFullPath) || srcSubFolderFullPath.indexOf(modelNamingConvention) < 0) return;
        const findNamingConvention = new RegExp(modelNamingConvention, 'g');
        const importVarName = capitalize(camalize(srcSubFolder.replace(/.ts/, '')))
            .replace(/[^\w]+/g, '');
        const providerSymbol = srcSubFolder
            .replace(findNamingConvention, '')
            .replace(/[^\w]+/g, '');
        // eslint-disable-next-line no-console
        console.debug(`Registering model ${importVarName}`);
        imports.push(`import { ${importVarName} } from '../${modelFolder.replace(/.ts/, '')}';`);
        models.push(`models.set('${providerSymbol}', ${importVarName});`);
    });

    fs.readdirSync(providersList).forEach((srcSubFolder: string) => {
        const srcSubFolderFullPath: string = path.join(providersList, srcSubFolder);
        const providerFolder = srcSubFolderFullPath.replace(/(\\)/g, '/');
        if (!fs.existsSync(srcSubFolderFullPath) || srcSubFolderFullPath.indexOf(providerNamingConvention) < 0) return;
        const findNamingConvention = new RegExp(providerNamingConvention, 'g');
        const importVarName = capitalize(camalize(srcSubFolder.replace(/.ts/, '')))
            .replace(/[^\w]+/g, '');
        const providerSymbol = srcSubFolder
            .replace(findNamingConvention, '')
            .replace(/[^\w]+/g, '');
        // eslint-disable-next-line no-console
        console.debug(`Registering provider ${importVarName}`);
        imports.push(`import { ${importVarName} } from '../${providerFolder.replace(/.ts/, '')}';`);
        providers.push(`providers.set('${providerSymbol}', ${importVarName});`);
    });

    return `
// Do not edit this file, it is auto-generated at build time!
// See scripts/register-color.ts to modify the generation of this file.
${imports.join('\n')}

export const models = new Map<string, any>();
${models.join('\n')}

export const providers = new Map<string, any>();
${providers.join('\n')}
`;
}

export {};
